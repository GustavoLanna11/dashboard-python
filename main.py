import streamlit as st
import pandas as pd
import requests

from src.loader import carregar_dados
from src.graph import grafico_barras, grafico_pizza
from src.layout import titulo_principal, filtro_departamento, mostrar_kpis

# ‚úÖ Lista completa de colunas esperadas
colunas_esperadas = [
    "Nome da m√°quina", "Propriet√°rio", "Etiqueta", "Cidade", "Departamento",
    "Unidade Residente", "Marca", "N√∫mero de S√©rie", "Tipo", "Modelo",
    "Licen√ßa", "Processador", "Troca de m√°quina", "Tipo de mem√≥ria", "Pentes",
    "Tamanho", "Armazenamento", "Tipo de armazenamento", "Licen√ßa Windows",
    "Troca ou Upgrade", "Prioridade", "Antiv√≠rus", "Upgrade?", "Em uso?",
    "Est√° no AD?", "Observa√ß√µes"
]

# ‚úÖ Carrega os dados da API Flask
def carregar_dados_api(url="http://192.168.0.138:5000/dados"):
    try:
        response = requests.get(url)
        response.raise_for_status()
        dados_json = response.json()
        df = pd.DataFrame(dados_json)
        st.success("‚úÖ Dados carregados automaticamente da API!")
        return df
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar dados da API: {e}")
        return None

# üåê T√≠tulo e Menu
titulo_principal()
menu = st.sidebar.selectbox(
    "Selecione uma op√ß√£o",
    ["S√£o Paulo", "Rio de Janeiro", "Planilha Personalizada", "Dados pela API"]
)

df = None
cores = ['#FF6347', '#4682B4', '#32CD32', '#FF0000']

# üîÑ Op√ß√µes do menu
if menu == "S√£o Paulo":
    st.header("Dashboard S√£o Paulo")
    df = carregar_dados("data/inventario_maquinas_exemplo.csv")

elif menu == "Rio de Janeiro":
    st.header("Dashboard Rio de Janeiro")
    df = carregar_dados("data/inventario_maquinas_exemplo2.csv")
    cores = ['#2980B9', '#F39C12', '#1ABC9C', '#E74C3C']

elif menu == "Planilha Personalizada":
    st.header("üì§ Dashboard Personalizado")
    uploaded_file = st.file_uploader("Envie sua planilha (.csv ou .xlsx)", type=["csv", "xlsx"])

    if uploaded_file:
        try:
            if uploaded_file.name.endswith('.csv'):
                df_temp = pd.read_csv(uploaded_file, sep=";", encoding="latin1")
            else:
                df_temp = pd.read_excel(uploaded_file)

            colunas_faltando = [col for col in colunas_esperadas if col not in df_temp.columns]
            if colunas_faltando:
                st.warning("‚ö†Ô∏è A planilha est√° faltando as seguintes colunas:")
                st.write("- " + "\n- ".join(colunas_faltando))
            else:
                st.success("‚úÖ Planilha carregada com sucesso!")
                df = df_temp
        except Exception as e:
            st.error(f"‚ùå Erro ao carregar a planilha: {e}")
    else:
        with st.expander("üìã Ver colunas esperadas para o arquivo"):
            st.markdown("Sua planilha precisa conter **exatamente essas colunas** para funcionar corretamente:")
            st.markdown("- " + "\n- ".join(colunas_esperadas))

elif menu == "Dados pela API":
    st.header("üì° Dashboard Autom√°tico (dados da API)")
    df = carregar_dados_api()

# üìä Exibe os KPIs e gr√°ficos se houver DataFrame
if df is not None:
    mostrar_kpis(df)

    if menu == "Dados pela API":
        # üëâ Gr√°ficos reduzidos (sem 'Troca de m√°quina' e 'Upgrade?')
        col3, col4 = st.columns(2)
        with col3: grafico_pizza(df, 'Antiv√≠rus', "Antiv√≠rus", cores)
        with col4: grafico_pizza(df, 'Licen√ßa Windows', "Licen√ßa Windows", cores)

        col2, col1 = st.columns(2)
        with col1: grafico_barras(df, 'Tamanho', "Mem√≥ria RAM", cores)
        with col2: grafico_barras(df, 'Tipo', "Tipo de M√°quina", cores)

    else:
        # üëà Vers√£o completa com todos os gr√°ficos
        col3, col4, col6 = st.columns(3)
        with col6: grafico_pizza(df, 'Antiv√≠rus', "Antiv√≠rus", cores)
        with col3: grafico_pizza(df, 'Licen√ßa Windows', "Licen√ßa Windows", cores)
        with col4: grafico_barras(df, 'Troca de m√°quina', "Troca de M√°quina", cores)

        col2, col5, col1, col7 = st.columns(4)
        with col1: grafico_barras(df, 'Tamanho', "Mem√≥ria RAM", cores)
        with col2: grafico_barras(df, 'Tipo', "Tipo de M√°quina", cores)
        with col5: grafico_pizza(df, 'Upgrade?', "Upgrade?", cores)
        with col7: grafico_pizza(df, 'Tipo de armazenamento', "Disco R√≠gido", cores)

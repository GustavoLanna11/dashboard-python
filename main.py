import streamlit as st
from src.loader import carregar_dados
from src.graph import grafico_barras, grafico_pizza
from src.layout import titulo_principal, filtro_departamento, mostrar_kpis
import pandas as pd

# ‚úÖ Lista completa de colunas esperadas
colunas_esperadas = [
    "Nome da m√°quina", "Propriet√°rio", "Etiqueta", "Cidade", "Departamento",
    "Unidade Residente", "Marca", "N√∫mero de S√©rie", "Tipo", "Modelo",
    "Licen√ßa", "Processador", "Troca de m√°quina", "Tipo de mem√≥ria", "Pentes",
    "Tamanho", "Armazenamento", "Tipo de armazenamento", "Licen√ßa Windows",
    "Troca ou Upgrade", "Prioridade", "Antiv√≠rus", "Upgrade?", "Em uso?",
    "Est√° no AD?", "Observa√ß√µes"
]

titulo_principal()
menu = st.sidebar.selectbox("Selecione uma op√ß√£o", ["S√£o Paulo", "Rio de Janeiro", "Planilha Personalizada"])

df = None
cores = ['#FF6347', '#4682B4', '#32CD32', '#FF0000']

if menu == "S√£o Paulo":
    st.header("Dashboard S√£o Paulo")
    df = carregar_dados("data/inventario_maquinas_exemplo.csv")

elif menu == "Rio de Janeiro":
    st.header("Dashboard Rio de Janeiro")
    df = carregar_dados("data/inventario_maquinas_exemplo2.csv")
    cores = ['#2980B9', '#F39C12', '#1ABC9C', '#E74C3C']

elif menu == "Planilha Personalizada":
    st.header("üì§ Dashboard Personalizado")
    uploaded_file = st.file_uploader("Envie sua planilha (.csv ou .xlsx)", type=["csv", "xlsx"])
    
    if uploaded_file:
        try:
            if uploaded_file.name.endswith('.csv'):
                df_temp = pd.read_csv(uploaded_file, sep=";", encoding="latin1")
            else:  # assume .xlsx
                df_temp = pd.read_excel(uploaded_file)

            # Verifica colunas obrigat√≥rias
            colunas_faltando = [col for col in colunas_esperadas if col not in df_temp.columns]
            if colunas_faltando:
                st.warning("‚ö†Ô∏è A planilha est√° faltando as seguintes colunas:")
                st.write("- " + "\n- ".join(colunas_faltando))
            else:
                st.success("‚úÖ Planilha carregada com sucesso!")
                df = df_temp  # S√≥ atribui √† vari√°vel principal se tudo estiver certo
        except Exception as e:
            st.error(f"‚ùå Erro ao carregar a planilha: {e}")
    else:
        with st.expander("üìã Ver colunas esperadas para o arquivo"):
            st.markdown("Sua planilha precisa conter **exatamente essas colunas** para funcionar corretamente:")
            st.markdown("- " + "\n- ".join(colunas_esperadas))


# Se houver DataFrame carregado, exibe os KPIs e gr√°ficos
if df is not None:
    mostrar_kpis(df)

    col3, col4, col6 = st.columns(3)
    with col6: grafico_pizza(df, 'Antiv√≠rus', "Antiv√≠rus", cores)
    with col3: grafico_pizza(df, 'Licen√ßa Windows', "Licen√ßa Windows", cores)
    with col4: grafico_barras(df, 'Troca de m√°quina', "Troca de M√°quina", cores)

    col2, col5, col1, col7 = st.columns(4)
    with col1: grafico_barras(df, 'Tamanho', "Mem√≥ria RAM", cores)
    with col2: grafico_barras(df, 'Tipo', "Tipo de M√°quina", cores)
    with col5: grafico_pizza(df, 'Upgrade?', "Upgrade?", cores)
    with col7: grafico_pizza(df, 'Tipo de armazenamento', "Disco R√≠gido", cores)

    df_filtrado = filtro_departamento(df)
    csv = df_filtrado.to_csv(index=False, sep=";", encoding="latin1")
    st.download_button(
        label="üì• Baixar dados filtrados (CSV)",
        data=csv,
        file_name="dados_filtrados.csv",
        mime="text/csv"
    )
